name: Publish to NPM

on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Verify NPM token
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "‚ùå NPM_TOKEN secret is not set!"
            exit 1
          fi
          echo "‚úÖ NPM token is configured"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Verify package structure
        run: |
          echo "üì¶ Checking package.json..."
          cat package.json
          echo ""
          echo "üîß Checking CLI executable..."
          chmod +x bin/unicrn.js
          node bin/unicrn.js --version
          echo ""
          echo "üìÅ Checking components..."
          ls -la components/ui/
          echo ""
          echo "üé® Checking unistyles.ts..."
          ls -la unistyles.ts

      - name: Run tests (if any)
        run: |
          # Add test command here when tests are available
          # npm test
          echo "‚ö†Ô∏è  No tests configured yet"

      - name: Build and verify package
        run: |
          echo "üî® Building package..."
          npm pack --dry-run
          echo ""
          echo "üìä Package contents will be:"
          npm pack --dry-run 2>/dev/null | grep -E '\.(js|ts|json|md)$' || true

      - name: Check if version already exists on NPM
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          echo "Checking if $PACKAGE_NAME@$PACKAGE_VERSION already exists..."
          
          if npm view $PACKAGE_NAME@$PACKAGE_VERSION version 2>/dev/null; then
            echo "‚ùå Version $PACKAGE_VERSION already exists on NPM!"
            echo "Please bump the version in package.json before releasing."
            exit 1
          else
            echo "‚úÖ Version $PACKAGE_VERSION is available for publishing"
          fi

      - name: Publish to NPM
        run: |
          echo "üöÄ Publishing to NPM..."
          npm publish --access public
          echo "‚úÖ Successfully published to NPM!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify publication
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          echo "üîç Verifying publication..."
          sleep 30  # Wait for NPM to sync
          
          if npm view $PACKAGE_NAME@$PACKAGE_VERSION version; then
            echo "‚úÖ Package successfully published and available on NPM!"
          else
            echo "‚ùå Package publication verification failed"
            exit 1
          fi

      - name: Create success comment on release
        uses: actions/github-script@v7
        with:
          script: |
            const packageJson = require('./package.json');
            const version = packageJson.version;
            const name = packageJson.name;
            
            github.rest.repos.createReleaseComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: `üéâ **Successfully published to NPM!**
              
              üì¶ **Package:** \`${name}@${version}\`
              üîó **NPM:** https://www.npmjs.com/package/${name}
              
              **Installation:**
              \`\`\`bash
              npx ${name}@latest init
              \`\`\`
              
              **Or install globally:**
              \`\`\`bash
              npm install -g ${name}@${version}
              \`\`\``
            })
