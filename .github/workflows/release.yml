name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      pre-release:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for proper changelog

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "📦 Current version: $CURRENT_VERSION"

      - name: Bump version
        run: |
          echo "🔄 Bumping version (${{ github.event.inputs.version }})..."
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "✅ New version: $NEW_VERSION"

      - name: Update CLI version
        run: |
          echo "🔧 Updating CLI version in bin/unicrn.js..."
          sed -i "s/\.version('.*')/\.version('${{ env.NEW_VERSION }}')/g" bin/unicrn.js
          
          # Verify the change
          if grep -q "\.version('${{ env.NEW_VERSION }}')" bin/unicrn.js; then
            echo "✅ CLI version updated successfully"
          else
            echo "❌ Failed to update CLI version"
            exit 1
          fi

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "📋 First release - no previous tags found"
            CHANGELOG="## What's New\n\n🎉 Initial release of UNICRN v${{ env.NEW_VERSION }}!\n\nSee the [README](https://github.com/periabyte/unicrn/blob/main/README.md) for full documentation."
          else
            echo "📋 Generating changelog since $LAST_TAG"
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s" | head -20)
            if [ -z "$COMMITS" ]; then
              CHANGELOG="## What's Changed\n\n- Version bump to v${{ env.NEW_VERSION }}"
            else
              CHANGELOG="## What's Changed\n\n$COMMITS"
            fi
          fi
          
          # Save changelog to file and environment
          echo -e "$CHANGELOG" > changelog.md
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo -e "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit version bump
        run: |
          echo "💾 Committing version bump..."
          git add package.json bin/unicrn.js
          git commit -m "chore: bump version to v${{ env.NEW_VERSION }}"
          git tag "v${{ env.NEW_VERSION }}"
          git push origin main
          git push origin "v${{ env.NEW_VERSION }}"
          echo "✅ Version bump committed and tagged"

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v7
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}
          CURRENT_VERSION: ${{ env.CURRENT_VERSION }}
          CHANGELOG: ${{ env.CHANGELOG }}
          IS_PRERELEASE: ${{ github.event.inputs.pre-release == 'true' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newVersion = process.env.NEW_VERSION;
            const currentVersion = process.env.CURRENT_VERSION;
            const changelog = process.env.CHANGELOG;
            const isPrerelease = process.env.IS_PRERELEASE === 'true';
            
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${newVersion}`,
              name: `UNICRN v${newVersion}`,
              body: `${changelog}
            
            ---
            
            ## 🚀 Installation
            
            \`\`\`bash
            npx unicrn@${newVersion} init
            \`\`\`
            
            ## 📦 What's UNICRN?
            
            A CLI tool for adding React Native UI components inspired by shadcn/ui, built with React Native Unistyles.
            
            ## 📋 Quick Start
            
            \`\`\`bash
            # Initialize in your React Native project
            npx unicrn@latest init
            
            # Install dependencies
            npm install react-native-unistyles react-native-reanimated expo-router
            
            # Add components and hooks
            npx unicrn@latest add button card usedisclose
            \`\`\`
            
            **Full Changelog**: https://github.com/periabyte/unicrn/compare/${currentVersion}...v${newVersion}`,
              draft: false,
              prerelease: isPrerelease
            });
            
            console.log(`✅ Release created: ${release.html_url}`);
            console.log(`🎯 Release ID: ${release.id}`);
            console.log(`📋 Release Type: ${isPrerelease ? 'Pre-release' : 'Release'}`);
            console.log(`🔔 This should trigger the publish workflow automatically`);
            core.setOutput('release_id', release.id);
            core.setOutput('release_url', release.html_url);

      - name: Trigger Publish Workflow (Backup)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Wait a moment for the release event to propagate
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // Manually trigger the publish workflow as a backup
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'publish.yml',
                ref: 'main',
                inputs: {}
              });
              console.log('🚀 Manually triggered publish workflow as backup');
            } catch (error) {
              console.log('⚠️ Could not manually trigger publish workflow:', error.message);
              console.log('📋 Please check if the release event triggered it automatically');
            }

      - name: Release Summary
        run: |
          echo "🎉 Release Summary:"
          echo "📦 Package: unicrn"
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "🏷️  Version: v$NEW_VERSION"
          echo "🔗 Release: https://github.com/periabyte/unicrn/releases/tag/v$NEW_VERSION"
          echo ""
          echo "🚀 The publish workflow should trigger automatically!"
          echo "🔄 If not, it was manually triggered as backup."
          echo "⏱️  NPM publish may take a few minutes to complete."
          echo "🔍 Check the 'Publish to NPM' workflow in Actions tab."
          echo "📦 Final package: https://www.npmjs.com/package/unicrn"
